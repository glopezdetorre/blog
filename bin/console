#!/usr/bin/env php
<?php

require __DIR__.'/../vendor/autoload.php';

use Gorka\Blog\Domain\Command\Post\TagPost;
use Gorka\Blog\Domain\Command\Post\TagPostHandler;
use Gorka\Blog\Domain\Command\Post\UntagPost;
use Gorka\Blog\Domain\Command\Post\UntagPostHandler;
use Gorka\Blog\Domain\Query\Post\LatestPosts;
use Gorka\Blog\Infrastructure\Data\EventStore\PostgresEventStore;
use Gorka\Blog\Infrastructure\Ui\Console\PostQueryLatest;
use Gorka\Blog\Infrastructure\Ui\Console\PostTag;
use Gorka\Blog\Infrastructure\Ui\Console\PostUntag;
use Gorka\Blog\Infrastructure\Data\EventStore\MongoEventStore;
use Gorka\Blog\Infrastructure\Service\UuidGenerator;
use Gorka\Blog\Domain\Command\Post\PublishPostHandler;
use Gorka\Blog\Domain\Command\Post\UnpublishPostHandler;
use Gorka\Blog\Infrastructure\Ui\Console\PostImport;
use Gorka\Blog\Infrastructure\Ui\Console\PostPublish;
use Gorka\Blog\Infrastructure\Ui\Console\PostUnpublish;
use Gorka\Blog\Domain\Command\Post\PublishPost;
use Gorka\Blog\Domain\Command\Post\UnpublishPost;
use Gorka\Blog\Domain\Command\Post\CreatePost;
use Gorka\Blog\Domain\Command\Post\CreatePostHandler;
use Gorka\Blog\Domain\Event\Post\PostWasCreated;
use Symfony\Component\Console\Application;
use Gorka\Pimp\Container;

$container = new Container([
    'Slugifier' => function () {
        return new \Gorka\Blog\Infrastructure\Service\Slugifier(new \Cocur\Slugify\Slugify());
    },
    'QuestionHelper' => function () {
        return new \Symfony\Component\Console\Helper\QuestionHelper();
    },
    'IdGenerator' => function () {
        return new UuidGenerator();
    },
    'SystemClock' => function () {
        return new \Gorka\Blog\Infrastructure\Service\SystemClock();
    },
    'Wrapper' => function ($c) {
        return new \Gorka\Blog\Infrastructure\Service\Message\Serializer\Wrapper($c->get('SystemClock'));
    },
    'Serializer' => function ($c) {
        return new \Gorka\Blog\Infrastructure\Service\Message\Serializer\Serializer($c->get('Wrapper'));
    },
    'EventStore' => function ($c) {
        $connection = new \PDO('pgsql:host=localhost;dbname=blog;');
        return new PostgresEventStore($c->get('Serializer'), $connection);
    },
    'QueryBus' => function ($c) {
        $queryBus = new \Prooph\ServiceBus\QueryBus();
        $router = new \Prooph\ServiceBus\Plugin\Router\QueryRouter();
        $router
            ->route(LatestPosts::class)
            ->to(
                function () {
                    $posts = [
                        [
                            'title' => 'Test title',
                            'url' => 'http://blog.gorka.io/posts/test-title'
                        ],
                        [
                            'title' => 'Test title the second',
                            'url' => 'http://blog.gorka.io/posts/test-title-second'
                        ],
                    ];
                    return $posts;
                }
            );
        $queryBus->utilize($router);
        return $queryBus;
    },
    'EventBus' => function ($c) {
        $eventBus = new \Prooph\ServiceBus\EventBus();
        $router = new \Prooph\ServiceBus\Plugin\Router\EventRouter();
        $router
            ->route(PostWasCreated::class)
            ->to(
                function (PostWasCreated $event) {

                }
            );
        $eventBus->utilize($router);

        return $eventBus;
    },
    'CommandBus' => function ($c) {
        $commandBus = new \Prooph\ServiceBus\CommandBus();
        $router = new \Prooph\ServiceBus\Plugin\Router\CommandRouter();
        $router
            ->route(CreatePost::class)
            ->to(
                function (CreatePost $command) use ($c) {
                    $handler = $c->get('CreatePostHandler');
                    $handler->handle($command);
                }
            );
        $router
            ->route(PublishPost::class)
            ->to(
                function (PublishPost $command) use ($c) {
                    $handler = $c->get('PublishPostHandler');
                    $handler->handle($command);
                }
            );
        $router
            ->route(UnpublishPost::class)
            ->to(
                function (UnpublishPost $command) use ($c) {
                    $handler = $c->get('UnpublishPostHandler');
                    $handler->handle($command);
                }
            );
        $router
            ->route(TagPost::class)
            ->to(
                function (TagPost $command) use ($c) {
                    $handler = $c->get('TagPostHandler');
                    $handler->handle($command);
                }
            );
        $router
            ->route(UntagPost::class)
            ->to(
                function (UntagPost $command) use ($c) {
                    $handler = $c->get('UntagPostHandler');
                    $handler->handle($command);
                }
            );

        $commandBus->utilize($router);

        return $commandBus;
    }
]);

$container->add(
    'CreatePostHandler',
    function($c) {
        return new CreatePostHandler($c->get('EventStore'), $c->get('EventBus'), $c->get('Slugifier'));
    }
);

$container->add(
    'PublishPostHandler',
    function ($c) {
        return new PublishPostHandler($c->get('EventStore'), $c->get('EventBus'));
    }
);

$container->add(
    'UnpublishPostHandler',
    function ($c) {
        return new UnpublishPostHandler($c->get('EventStore'), $c->get('EventBus'));
    }
);

$container->add(
    'TagPostHandler',
    function ($c) {
        return new TagPostHandler($c->get('EventStore'), $c->get('EventBus'), $c->get('Slugifier'));
    }
);

$container->add(
    'UntagPostHandler',
    function ($c) {
        return new UntagPostHandler($c->get('EventStore'), $c->get('EventBus'));
    }
);

$application = new Application();
$application->add(new PostImport($container->get('CommandBus'), $container->get('IdGenerator'), $container->get('QuestionHelper')));
$application->add(new PostPublish($container->get('CommandBus')));
$application->add(new PostUnpublish($container->get('CommandBus')));
$application->add(new PostTag($container->get('CommandBus')));
$application->add(new PostUntag($container->get('CommandBus')));
$application->add(new PostQueryLatest($container->get('QueryBus')));

$application->run();