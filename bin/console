#!/usr/bin/env php
<?php

require __DIR__.'/../vendor/autoload.php';

use Gorka\Blog\Domain\Command\Post\TagPost;
use Gorka\Blog\Domain\Command\Post\TagPostHandler;
use Gorka\Blog\Domain\Command\Post\UntagPost;
use Gorka\Blog\Domain\Command\Post\UntagPostHandler;
use Gorka\Blog\Infrastructure\Ui\Console\PostTag;
use Gorka\Blog\Infrastructure\Ui\Console\PostUntag;
use Gorka\Blog\Infrastructure\Data\EventStore\MongoEventStore;
use Gorka\Blog\Infrastructure\Service\UuidGenerator;
use Gorka\Blog\Domain\Command\Post\PublishPostHandler;
use Gorka\Blog\Domain\Command\Post\UnpublishPostHandler;
use Gorka\Blog\Infrastructure\Ui\Console\PostImport;
use Gorka\Blog\Infrastructure\Ui\Console\PostPublish;
use Gorka\Blog\Infrastructure\Ui\Console\PostUnpublish;
use Gorka\Blog\Domain\Command\Post\PublishPost;
use Gorka\Blog\Domain\Command\Post\UnpublishPost;
use Gorka\Blog\Domain\Command\Post\CreatePost;
use Gorka\Blog\Domain\Command\Post\CreatePostHandler;
use Gorka\Blog\Domain\Event\Post\PostWasCreated;
use SimpleBus\Message\Bus\Middleware\FinishesHandlingMessageBeforeHandlingNext;
use SimpleBus\Message\Bus\Middleware\MessageBusSupportingMiddleware;
use SimpleBus\Message\CallableResolver\CallableCollection;
use SimpleBus\Message\CallableResolver\CallableMap;
use SimpleBus\Message\CallableResolver\ServiceLocatorAwareCallableResolver;
use SimpleBus\Message\Handler\DelegatesToMessageHandlerMiddleware;
use SimpleBus\Message\Handler\Resolver\NameBasedMessageHandlerResolver;
use SimpleBus\Message\Name\ClassBasedNameResolver;
use SimpleBus\Message\Subscriber\NotifiesMessageSubscribersMiddleware;
use SimpleBus\Message\Subscriber\Resolver\NameBasedMessageSubscriberResolver;
use Symfony\Component\Console\Application;
use Gorka\Pimp\Container;

$container = new Container([
    'Slugifier' => function () {
        return new \Gorka\Blog\Infrastructure\Service\Slugifier(new \Cocur\Slugify\Slugify());
    },
    'QuestionHelper' => function () {
        return new \Symfony\Component\Console\Helper\QuestionHelper();
    },
    'IdGenerator' => function () {
        return new UuidGenerator();
    },
    'SystemClock' => function () {
        return new \Gorka\Blog\Infrastructure\Service\SystemClock();
    },
    'Wrapper' => function ($c) {
        return new \Gorka\Blog\Infrastructure\Service\Message\Serializer\Wrapper($c->get('SystemClock'));
    },
    'Serializer' => function ($c) {
        return new \Gorka\Blog\Infrastructure\Service\Message\Serializer\Serializer($c->get('Wrapper'));
    },
    'EventStore' => function ($c) {
        $mongoClient = new MongoClient();
        return new MongoEventStore($c->get('Serializer'), $mongoClient, 'blog', 'events');
    },
    'EventBus' => function ($c) {
        $serviceLocator = function ($serviceName) use ($c) {
            return $c->get($serviceName);
        };

        $eventSubscriberCollection = new CallableCollection(
            [
                PostWasCreated::class => []
            ],
            new ServiceLocatorAwareCallableResolver($serviceLocator)
        );
        $eventSubscribersResolver = new NameBasedMessageSubscriberResolver(
            new ClassBasedNameResolver(),
            $eventSubscriberCollection
        );
        $eventBus = new MessageBusSupportingMiddleware(
            [
                new FinishesHandlingMessageBeforeHandlingNext(),
                new NotifiesMessageSubscribersMiddleware(
                    $eventSubscribersResolver
                )
            ]
        );
        return $eventBus;
    },
    'CommandBus' => function ($c) {
        $serviceLocator = function ($serviceName) use ($c) {
            return $c->get($serviceName);
        };
        $commandHandlerMap = new CallableMap(
            [
                CreatePost::class => ['CreatePostHandler', 'handle'],
                PublishPost::class => ['PublishPostHandler', 'handle'],
                UnpublishPost::class => ['UnpublishPostHandler', 'handle'],
                TagPost::class => ['TagPostHandler', 'handle'],
                UntagPost::class => ['UntagPostHandler', 'handle']
            ],
            new ServiceLocatorAwareCallableResolver($serviceLocator)
        );
        $commandHandlerResolver = new NameBasedMessageHandlerResolver(
            new ClassBasedNameResolver(),
            $commandHandlerMap
        );
        $commandBus = new MessageBusSupportingMiddleware(
            [
                new FinishesHandlingMessageBeforeHandlingNext(),
                new DelegatesToMessageHandlerMiddleware($commandHandlerResolver)
            ]
        );
        return $commandBus;
    }
]);

$container->add(
    'CreatePostHandler',
    function($c) {
        return new CreatePostHandler($c->get('EventStore'), $c->get('EventBus'), $c->get('Slugifier'));
    }
);

$container->add(
    'PublishPostHandler',
    function ($c) {
        return new PublishPostHandler($c->get('EventStore'), $c->get('EventBus'));
    }
);

$container->add(
    'UnpublishPostHandler',
    function ($c) {
        return new UnpublishPostHandler($c->get('EventStore'), $c->get('EventBus'));
    }
);

$container->add(
    'TagPostHandler',
    function ($c) {
        return new TagPostHandler($c->get('EventStore'), $c->get('EventBus'), $c->get('Slugifier'));
    }
);

$container->add(
    'UntagPostHandler',
    function ($c) {
        return new UntagPostHandler($c->get('EventStore'), $c->get('EventBus'));
    }
);

$application = new Application();
$application->add(new PostImport($container->get('CommandBus'), $container->get('IdGenerator'), $container->get('QuestionHelper')));
$application->add(new PostPublish($container->get('CommandBus')));
$application->add(new PostUnpublish($container->get('CommandBus')));
$application->add(new PostTag($container->get('CommandBus')));
$application->add(new PostUntag($container->get('CommandBus')));
$application->run();